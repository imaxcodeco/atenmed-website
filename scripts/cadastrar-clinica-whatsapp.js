/**
 * Script para Cadastrar Cl√≠nica com WhatsApp
 * Uso: node scripts/cadastrar-clinica-whatsapp.js
 */

require('dotenv').config();
const mongoose = require('mongoose');
const readline = require('readline');
const Clinic = require('../models/Clinic');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

function limparNumero(numero) {
    // Remove tudo que n√£o √© n√∫mero
    return numero.replace(/\D/g, '');
}

function validarNumero(numero) {
    const limpo = limparNumero(numero);
    
    // Deve ter pelo menos 12 d√≠gitos (55 + DDD + n√∫mero)
    if (limpo.length < 12) {
        return { valid: false, error: 'N√∫mero muito curto (m√≠nimo: 55 + DDD + n√∫mero)' };
    }
    
    // Deve come√ßar com 55 (Brasil)
    if (!limpo.startsWith('55')) {
        return { valid: false, error: 'N√∫mero deve come√ßar com c√≥digo do pa√≠s (55)' };
    }
    
    return { valid: true, numero: limpo };
}

async function cadastrarClinica() {
    try {
        console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
        console.log('‚ïë                                                          ‚ïë');
        console.log('‚ïë    üè• CADASTRAR CL√çNICA COM WHATSAPP üè•                 ‚ïë');
        console.log('‚ïë                                                          ‚ïë');
        console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

        // Conectar ao banco
        console.log('üì° Conectando ao banco de dados...');
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('‚úÖ Conectado!\n');

        // Coletar informa√ß√µes
        console.log('üìã Preencha os dados da cl√≠nica:\n');

        const name = await question('Nome da cl√≠nica: ');
        if (!name) {
            throw new Error('Nome √© obrigat√≥rio');
        }

        const phone = await question('Telefone fixo (ex: 11 3333-4444): ');
        const email = await question('Email: ');
        
        let whatsappNumero;
        while (true) {
            const whatsappInput = await question('N√∫mero WhatsApp (ex: 11 98765-4321): ');
            const validacao = validarNumero(whatsappInput);
            
            if (validacao.valid) {
                whatsappNumero = validacao.numero;
                console.log(`‚úÖ N√∫mero validado: ${whatsappNumero}\n`);
                break;
            } else {
                console.log(`‚ùå ${validacao.error}`);
                console.log('üí° Formato aceito: (11) 98765-4321 ou 5511987654321\n');
            }
        }

        const website = await question('Website (opcional): ');
        const street = await question('Rua: ');
        const number = await question('N√∫mero: ');
        const neighborhood = await question('Bairro: ');
        const city = await question('Cidade: ');
        const state = await question('Estado (ex: SP): ');
        const zipCode = await question('CEP: ');

        console.log('\n‚è∞ Hor√°rio de funcionamento:');
        const startHour = await question('Hor√°rio de abertura (ex: 8): ') || '8';
        const endHour = await question('Hor√°rio de fechamento (ex: 18): ') || '18';

        // Confirmar
        console.log('\nüìä RESUMO:\n');
        console.log(`Nome: ${name}`);
        console.log(`WhatsApp: ${whatsappNumero}`);
        console.log(`Email: ${email}`);
        console.log(`Telefone: ${phone}`);
        console.log(`Endere√ßo: ${street}, ${number} - ${neighborhood}`);
        console.log(`Cidade: ${city}/${state}`);
        console.log(`Hor√°rio: ${startHour}h √†s ${endHour}h\n`);

        const confirma = await question('Confirmar cadastro? (s/n): ');
        
        if (confirma.toLowerCase() !== 's' && confirma.toLowerCase() !== 'sim') {
            console.log('\n‚ùå Cadastro cancelado.');
            process.exit(0);
        }

        // Criar cl√≠nica
        console.log('\nüíæ Salvando cl√≠nica...');

        const clinic = new Clinic({
            name: name,
            slug: name
                .toLowerCase()
                .normalize('NFD')
                .replace(/[\u0300-\u036f]/g, '')
                .replace(/[^\w\s-]/g, '')
                .replace(/\s+/g, '-'),
            contact: {
                phone: phone,
                email: email,
                whatsapp: whatsappNumero,
                website: website
            },
            address: {
                street: street,
                number: number,
                neighborhood: neighborhood,
                city: city,
                state: state,
                zipCode: zipCode
            },
            workingHours: {
                start: parseInt(startHour),
                end: parseInt(endHour)
            },
            features: {
                onlineBooking: true,
                whatsappBot: true,
                telemedicine: false,
                electronicRecords: false
            },
            active: true
        });

        await clinic.save();

        console.log('\n‚úÖ CL√çNICA CADASTRADA COM SUCESSO!\n');
        console.log(`ID: ${clinic._id}`);
        console.log(`Nome: ${clinic.name}`);
        console.log(`WhatsApp: ${clinic.contact.whatsapp}`);
        console.log(`Slug: ${clinic.slug}`);
        console.log(`URL P√∫blica: /clinica/${clinic.slug}\n`);

        console.log('üéâ Pr√≥ximos passos:');
        console.log('1. Cadastre m√©dicos vinculados a esta cl√≠nica');
        console.log('2. Cadastre especialidades');
        console.log('3. Teste enviando "oi" para o n√∫mero WhatsApp');
        console.log(`4. Verifique os logs: tail -f logs/combined.log\n`);

    } catch (error) {
        console.error('\n‚ùå ERRO:', error.message);
        console.error(error);
    } finally {
        rl.close();
        await mongoose.connection.close();
        process.exit(0);
    }
}

// Executar
cadastrarClinica();

