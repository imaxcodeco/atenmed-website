/**
 * Valida√ß√£o de Vari√°veis de Ambiente
 * 
 * Valida que todas as vari√°veis cr√≠ticas est√£o configuradas antes
 * de iniciar a aplica√ß√£o. Previne erros em runtime.
 */

const logger = require('../utils/logger');

// Vari√°veis obrigat√≥rias por ambiente
const requiredEnvVars = {
    production: [
        // Core
        'NODE_ENV',
        'PORT',
        
        // Database
        'MONGODB_URI',
        
        // Seguran√ßa
        'JWT_SECRET',
        'SESSION_SECRET',
        
        // WhatsApp (obrigat√≥rio em produ√ß√£o)
        'WHATSAPP_PHONE_ID',
        'WHATSAPP_TOKEN',
        'WHATSAPP_VERIFY_TOKEN',
        'WHATSAPP_APP_SECRET',
        
        // Email (obrigat√≥rio em produ√ß√£o)
        'EMAIL_HOST',
        'EMAIL_PORT',
        'EMAIL_USER',
        'EMAIL_PASS',
        'EMAIL_FROM'
    ],
    
    development: [
        'NODE_ENV',
        'PORT',
        'JWT_SECRET'
    ],
    
    test: [
        'NODE_ENV',
        'MONGODB_TEST_URI',
        'JWT_SECRET'
    ]
};

// Vari√°veis opcionais mas recomendadas
const recommendedEnvVars = {
    production: [
        'REDIS_URL',
        'SENTRY_DSN',
        'GOOGLE_CLIENT_ID',
        'GOOGLE_CLIENT_SECRET',
        'GEMINI_API_KEY',
        'CORS_ORIGIN'
    ],
    development: [
        'MONGODB_URI'
    ]
};

/**
 * Valida vari√°veis de ambiente
 * @param {boolean} strict - Se true, falha em produ√ß√£o se vars faltarem
 * @returns {Object} Resultado da valida√ß√£o
 */
function validateEnv(strict = true) {
    const env = process.env.NODE_ENV || 'development';
    const required = requiredEnvVars[env] || requiredEnvVars.development;
    const recommended = recommendedEnvVars[env] || [];
    
    // Verificar vari√°veis obrigat√≥rias
    const missingRequired = required.filter(varName => !process.env[varName]);
    
    // Verificar vari√°veis recomendadas
    const missingRecommended = recommended.filter(varName => !process.env[varName]);
    
    const hasErrors = missingRequired.length > 0;
    const hasWarnings = missingRecommended.length > 0;
    
    // Log dos resultados
    if (hasErrors) {
        logger.error(`‚ùå Vari√°veis de ambiente obrigat√≥rias n√£o configuradas (${env}):`);
        missingRequired.forEach(varName => {
            logger.error(`   - ${varName}`);
        });
        
        if (env === 'production' && strict) {
            logger.error('\nüö® APLICA√á√ÉO N√ÉO PODE INICIAR EM PRODU√á√ÉO SEM ESSAS VARI√ÅVEIS!');
            process.exit(1);
        } else {
            logger.warn('\n‚ö†Ô∏è Continuando em modo desenvolvimento...');
        }
    } else {
        logger.info(`‚úÖ Todas as vari√°veis obrigat√≥rias configuradas (${env})`);
    }
    
    if (hasWarnings) {
        logger.warn(`‚ö†Ô∏è Vari√°veis recomendadas n√£o configuradas (${env}):`);
        missingRecommended.forEach(varName => {
            logger.warn(`   - ${varName} (recomendado)`);
        });
    }
    
    return {
        valid: !hasErrors,
        environment: env,
        missingRequired,
        missingRecommended,
        allConfigured: !hasErrors && !hasWarnings
    };
}

/**
 * Valida uma vari√°vel espec√≠fica
 * @param {string} varName - Nome da vari√°vel
 * @returns {boolean} True se configurada
 */
function checkVar(varName) {
    return !!process.env[varName];
}

/**
 * Obt√©m valor de vari√°vel com valida√ß√£o
 * @param {string} varName - Nome da vari√°vel
 * @param {*} defaultValue - Valor padr√£o
 * @param {boolean} required - Se √© obrigat√≥ria
 * @returns {*} Valor da vari√°vel ou padr√£o
 */
function getVar(varName, defaultValue = null, required = false) {
    const value = process.env[varName];
    
    if (!value) {
        if (required) {
            logger.error(`‚ùå Vari√°vel obrigat√≥ria n√£o configurada: ${varName}`);
            if (process.env.NODE_ENV === 'production') {
                process.exit(1);
            }
        }
        return defaultValue;
    }
    
    return value;
}

/**
 * Valida e converte para n√∫mero
 * @param {string} varName - Nome da vari√°vel
 * @param {number} defaultValue - Valor padr√£o
 * @returns {number} Valor num√©rico
 */
function getNumericVar(varName, defaultValue) {
    const value = process.env[varName];
    if (!value) return defaultValue;
    
    const parsed = parseInt(value, 10);
    if (isNaN(parsed)) {
        logger.warn(`‚ö†Ô∏è Vari√°vel ${varName} n√£o √© um n√∫mero v√°lido, usando padr√£o: ${defaultValue}`);
        return defaultValue;
    }
    
    return parsed;
}

/**
 * Valida e converte para boolean
 * @param {string} varName - Nome da vari√°vel
 * @param {boolean} defaultValue - Valor padr√£o
 * @returns {boolean} Valor booleano
 */
function getBooleanVar(varName, defaultValue = false) {
    const value = process.env[varName];
    if (!value) return defaultValue;
    
    return value.toLowerCase() === 'true' || value === '1';
}

/**
 * Mostra resumo da configura√ß√£o atual
 */
function showConfigSummary() {
    const env = process.env.NODE_ENV || 'development';
    
    logger.info('\nüìã Resumo da Configura√ß√£o:');
    logger.info(`   Ambiente: ${env}`);
    logger.info(`   Porta: ${process.env.PORT || '3000'}`);
    logger.info(`   MongoDB: ${process.env.MONGODB_URI ? 'Configurado' : 'N√£o configurado'}`);
    logger.info(`   JWT Secret: ${process.env.JWT_SECRET ? 'Configurado' : 'N√£o configurado'}`);
    logger.info(`   WhatsApp: ${process.env.WHATSAPP_TOKEN ? 'Configurado' : 'N√£o configurado'}`);
    logger.info(`   Email: ${process.env.EMAIL_HOST ? 'Configurado' : 'N√£o configurado'}`);
    logger.info(`   Redis: ${process.env.REDIS_URL || process.env.REDIS_HOST ? 'Configurado' : 'N√£o configurado'}`);
    logger.info(`   Sentry: ${process.env.SENTRY_DSN ? 'Configurado' : 'N√£o configurado'}`);
    logger.info(`   Google Calendar: ${process.env.GOOGLE_CLIENT_ID ? 'Configurado' : 'N√£o configurado'}`);
    logger.info(`   IA (Gemini): ${process.env.GEMINI_API_KEY ? 'Configurado' : 'N√£o configurado'}\n`);
}

module.exports = {
    validateEnv,
    checkVar,
    getVar,
    getNumericVar,
    getBooleanVar,
    showConfigSummary,
    requiredEnvVars,
    recommendedEnvVars
};

